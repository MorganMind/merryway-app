import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:intl/intl.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:go_router/go_router.dart';
import 'package:http/http.dart' as http;
import '../../../config/environment.dart';
import '../../family/blocs/family_bloc.dart';
import '../../family/models/family_models.dart';
import '../../family/models/pod_model.dart';
import '../../family/pages/pods_management_page.dart';
import '../../family/pages/family_health_dashboard_page.dart';
import '../../family/services/default_pod_service.dart';
import '../../family/services/rules_service.dart';
import '../widgets/suggestion_card.dart';
import '../widgets/context_input_panel.dart';
import '../widgets/participant_preset_sheet.dart';
import '../widgets/smart_suggestion_card.dart';
import '../../core/theme/merryway_theme.dart';
import '../../core/services/weather_service.dart';
import '../../auth/services/user_context_service.dart';
import '../../auth/widgets/user_switcher.dart';
import '../../experiences/widgets/create_experience_sheet.dart';
import '../../experiences/widgets/live_experience_card.dart';
import '../../experiences/widgets/experience_debrief_modal.dart';
import '../../experiences/repositories/experience_repository.dart';
import '../../experiences/models/experience_models.dart';

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  String? householdId;
  String? householdName;
  List<FamilyMember> familyMembers = [];
  bool familyModeEnabled = false;
  String? currentMemberId;  // Who is using the app right now
  
  // Context state
  String weather = 'cloudy';
  String timeOfDay = 'afternoon';
  String dayOfWeek = 'monday';
  String customPrompt = '';
  
  // Participant state
  Set<String> selectedParticipants = {};
  List<Pod> pods = [];
  String? selectedPodId; // Track which pod is currently selected
  bool isAllMode = true; // Track if "All" variety mode is active
  
  // Smart suggestion state
  Map<String, dynamic>? smartSuggestionData;
  bool showSmartSuggestion = false;

  // Live experiences state
  List<Experience> liveExperiences = [];
  List<Experience> upcomingExperiences = [];
  bool isLoadingExperiences = false;
  
  // AI suggestions loading state
  bool isLoadingAISuggestions = false;

  String _getDefaultTimeOfDay() {
    final hour = DateTime.now().hour;
    if (hour < 12) return 'morning';
    if (hour < 18) return 'afternoon';
    return 'evening';
  }

  String _getDefaultDayOfWeek() {
    return DateFormat('EEEE').format(DateTime.now()).toLowerCase();
  }

  Future<String> _getDefaultWeatherContext() async {
    // Fetch real weather from OpenWeatherMap
    try {
      final realWeather = await WeatherService.getCurrentWeather();
      return realWeather;
    } catch (e) {
      print('Error fetching weather: $e');
      // Fallback based on time
      final hour = DateTime.now().hour;
      if (hour >= 8 && hour <= 16) return 'sunny';
      return 'cloudy';
    }
  }

  String _getGreeting() {
    final hour = DateTime.now().hour;
    if (hour < 12) return 'Good morning';
    if (hour < 17) return 'Good afternoon';
    if (hour < 20) return 'Good evening';
    return 'Good night';
  }

  // Load live/planned experiences
  Future<void> _loadLiveExperiences() async {
    if (householdId == null) return;
    
    setState(() => isLoadingExperiences = true);
    
    try {
      final repository = ExperienceRepository();
      
      // Fetch live experiences
      final live = await repository.listExperiences(householdId!, status: 'live');
      
      // Fetch planned experiences
      final planned = await repository.listExperiences(householdId!, status: 'planned');
      
      // Filter upcoming (within 2 hours)
      final now = DateTime.now();
      final upcoming = planned.where((exp) {
        if (exp.startAt == null) return false;
        final diff = exp.startAt!.difference(now);
        return diff.inHours <= 2 && diff.inMinutes > 0;
      }).toList();
      
      setState(() {
        liveExperiences = live;
        upcomingExperiences = upcoming;
      });
    } catch (e) {
      print('Error loading live experiences: $e');
    } finally {
      setState(() => isLoadingExperiences = false);
    }
  }

  // Handle experience completion
  void _handleExperienceComplete(Experience experience) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => ExperienceDebriefModal(
        experience: experience,
        onComplete: () {
          _loadLiveExperiences(); // Refresh list
          setState(() {}); // Rebuild
        },
      ),
    );
  }

  // Handle experience cancellation
  Future<void> _handleExperienceCancel(Experience experience) async {
    try {
      final repository = ExperienceRepository();
      await repository.updateExperience(
        experience.id!,
        {'status': 'cancelled'},
      );
      
      await _loadLiveExperiences(); // Refresh list
      
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Experience cancelled'),
            duration: Duration(seconds: 2),
          ),
        );
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Error: $e')),
        );
      }
    }
  }

  void _fetchNewSuggestion({
    String? customWeather,
    String? customTimeOfDay,
    String? customDayOfWeek,
    String? customPromptText,
  }) async {
    setState(() {
      weather = customWeather ?? weather;
      timeOfDay = customTimeOfDay ?? timeOfDay;
      dayOfWeek = customDayOfWeek ?? dayOfWeek;
      customPrompt = customPromptText ?? customPrompt;
    });

    if (householdId != null) {
      // If there's a custom prompt, use AI-powered suggestions
      if (customPrompt.isNotEmpty) {
        await _fetchAISuggestions();
        return;
      }

      // If a pod is selected, use the pod-aware endpoint
      if (selectedPodId != null && selectedParticipants.isNotEmpty) {
        try {
          final rulesService = RulesService();
          final response = await rulesService.getSuggestionsForPod(
            householdId: householdId!,
            podMemberIds: selectedParticipants.toList(),
            weather: weather,
            timeBucket: timeOfDay,
            dayOfWeek: dayOfWeek,
            customPrompt: customPrompt.isNotEmpty ? customPrompt : null,
            podId: selectedPodId,
          );

          // Parse suggestions and dispatch to bloc
          final suggestions = (response['suggestions'] as List)
              .map((s) => ActivitySuggestion.fromJson(s))
              .toList();
          
          // Create a SuggestionsResponse object
          final suggestionsResponse = SuggestionsResponse(
            suggestions: suggestions,
            context: {
              'pod_id': response['pod_id'],
              'pod_member_ids': response['pod_member_ids'],
              'context_summary': response['context_summary'],
              'weather': weather,
              'time_of_day': timeOfDay,
              'day_of_week': dayOfWeek,
            },
          );
          
          // Manually update the bloc state with pod-aware suggestions
          context.read<FamilyBloc>().emit(SuggestionsLoaded(suggestionsResponse));
        } catch (e) {
          debugPrint('Error fetching pod-aware suggestions: $e');
          // Fallback to regular endpoint
          context.read<FamilyBloc>().add(
            GetSuggestionsEvent(
              householdId: householdId!,
              weather: weather,
              timeOfDay: timeOfDay,
              dayOfWeek: dayOfWeek,
              customPrompt: customPrompt.isNotEmpty ? customPrompt : null,
              participants: selectedParticipants.isNotEmpty
                  ? selectedParticipants.toList()
                  : null,
            ),
          );
        }
      } else {
        // Use regular endpoint when no pod is selected
        context.read<FamilyBloc>().add(
          GetSuggestionsEvent(
            householdId: householdId!,
            weather: weather,
            timeOfDay: timeOfDay,
            dayOfWeek: dayOfWeek,
            customPrompt: customPrompt.isNotEmpty ? customPrompt : null,
            // If "All" mode is active, don't filter by participants (variety mode)
            // Otherwise, filter by selected participants ("whole gang" or specific subset)
            participants: isAllMode
                ? null
                : (selectedParticipants.isNotEmpty ? selectedParticipants.toList() : null),
          ),
        );
      }
    }
  }

  String? _lastAISuggestionLogId; // Track the last AI suggestion log ID

  Future<void> _saveAISuggestionsToDatabase(List<ActivitySuggestion> suggestions) async {
    if (householdId == null) return;

    try {
      final supabase = Supabase.instance.client;
      
      // Prepare suggestions data for JSON storage
      final suggestionsJson = suggestions.map((s) => {
        'activity': s.activity,
        'rationale': s.rationale,
        'duration_minutes': s.durationMinutes,
        'tags': s.tags,
        'location': s.location,
        'distance_miles': s.distanceMiles,
        'venue_type': s.venueType,
      }).toList();

      // Save to ai_suggestion_logs table
      final result = await supabase.from('ai_suggestion_logs').insert({
        'household_id': householdId,
        'pod_id': selectedPodId,
        'prompt': customPrompt,
        'context': {
          'weather': weather,
          'time_of_day': timeOfDay,
          'day_of_week': dayOfWeek,
        },
        'participant_ids': isAllMode 
            ? null 
            : (selectedParticipants.isNotEmpty ? selectedParticipants.toList() : null),
        'suggestions': suggestionsJson,
        'model_used': 'gpt-3.5-turbo',
      }).select();

      // Store the log ID for tracking acceptance
      if (result.isNotEmpty) {
        _lastAISuggestionLogId = result[0]['id'];
      }

      debugPrint('✅ AI suggestions saved to database (log_id: $_lastAISuggestionLogId)');
    } catch (e) {
      debugPrint('❌ Error saving AI suggestions to database: $e');
      // Don't show error to user - this is background logging
    }
  }

  Future<void> _trackAISuggestionAccepted(String suggestionName) async {
    if (_lastAISuggestionLogId == null) return;

    try {
      final supabase = Supabase.instance.client;
      
      await supabase
          .from('ai_suggestion_logs')
          .update({
            'user_accepted_suggestion': suggestionName,
          })
          .eq('id', _lastAISuggestionLogId!);

      debugPrint('✅ Tracked AI suggestion acceptance: $suggestionName');
    } catch (e) {
      debugPrint('❌ Error tracking AI suggestion acceptance: $e');
    }
  }

  Future<void> _fetchAISuggestions() async {
    if (householdId == null || customPrompt.isEmpty) return;

    setState(() {
      isLoadingAISuggestions = true;
    });

    try {
      final supabase = Supabase.instance.client;
      final token = supabase.auth.currentSession?.accessToken ?? '';
      
      debugPrint('🤖 Fetching AI suggestions for prompt: "$customPrompt"');
      
      final response = await http.post(
        Uri.parse('${Environment.apiUrl}/ai-suggestions/'),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer $token',
        },
        body: jsonEncode({
          'household_id': householdId,
          'prompt': customPrompt,
          'context': {
            'weather': weather,
            'time_of_day': timeOfDay,
            'day_of_week': dayOfWeek,
          },
          'participants': isAllMode
              ? null
              : (selectedParticipants.isNotEmpty ? selectedParticipants.toList() : null),
          'pod_id': selectedPodId,
        }),
      );

      debugPrint('🤖 AI suggestions response: ${response.statusCode}');
      debugPrint('🤖 Response body: ${response.body}');

      if (response.statusCode == 200) {
        try {
          final data = jsonDecode(response.body);
          
          // Validate response structure
          if (data == null || data['suggestions'] == null) {
            throw Exception('Invalid response structure from backend');
          }
          
          final suggestions = (data['suggestions'] as List)
              .map((s) {
                try {
                  return ActivitySuggestion.fromJson(s);
                } catch (e) {
                  debugPrint('Error parsing suggestion: $e');
                  debugPrint('Suggestion data: $s');
                  rethrow;
                }
              })
              .toList();

          if (suggestions.isEmpty) {
            throw Exception('No suggestions returned from backend');
          }

          final suggestionsResponse = SuggestionsResponse(
            suggestions: suggestions,
            context: {
              'ai_generated': true,
              'prompt': customPrompt,
              'weather': weather,
              'time_of_day': timeOfDay,
              'day_of_week': dayOfWeek,
            },
          );

          if (mounted) {
            context.read<FamilyBloc>().emit(SuggestionsLoaded(suggestionsResponse));
            setState(() {
              isLoadingAISuggestions = false;
            });
            
            // Save AI suggestions to database for tracking
            _saveAISuggestionsToDatabase(suggestions);
          }
        } catch (e) {
          debugPrint('Error parsing response: $e');
          debugPrint('Response body: ${response.body}');
          if (mounted) {
            setState(() {
              isLoadingAISuggestions = false;
            });
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(
                content: Text('Error parsing backend response. Check console for details.'),
                duration: const Duration(seconds: 5),
              ),
            );
          }
        }
      } else {
        debugPrint('❌ AI suggestions error: ${response.statusCode} - ${response.body}');
        if (mounted) {
          setState(() {
            isLoadingAISuggestions = false;
          });
          String errorMsg = 'Backend error: ${response.statusCode}';
          if (response.statusCode == 404) {
            errorMsg = 'Backend endpoint not found. Check Django server.';
          } else if (response.statusCode == 401 || response.statusCode == 403) {
            errorMsg = 'Authentication error. Please log in again.';
          } else if (response.statusCode == 500) {
            errorMsg = 'Django server error. Check your Django console for details.';
          }
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(errorMsg),
              duration: const Duration(seconds: 6),
              action: SnackBarAction(
                label: 'Details',
                onPressed: () {
                  debugPrint('Full error: ${response.body}');
                },
              ),
            ),
          );
        }
      }
    } catch (e) {
      debugPrint('Exception fetching AI suggestions: $e');
      if (mounted) {
        setState(() {
          isLoadingAISuggestions = false;
        });
        final errorMsg = e.toString();
        final displayMsg = errorMsg.length > 100 
            ? errorMsg.substring(0, 100) + '...' 
            : errorMsg;
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('Network error: $displayMsg'),
            duration: const Duration(seconds: 5),
          ),
        );
      }
    }
  }

  void _onParticipantsChanged(Set<String> newSelection, {bool? setAllMode}) {
    setState(() {
      selectedParticipants = newSelection;
      // If manually changed from participant chips (not from pod carousel), disable All mode
      if (setAllMode != null) {
        isAllMode = setAllMode;
      } else {
        // Manual change from participant chips
        isAllMode = false;
      }
    });
    _saveParticipantSelection();
    // Re-fetch suggestions with new participants
    _fetchNewSuggestion();
  }

  void _showPresetSheet() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => ParticipantPresetSheet(
        allMembers: familyMembers,
        currentSelection: selectedParticipants,
        pods: pods,
        onApplyPod: (memberIds) {
          _onParticipantsChanged(memberIds);
        },
        onManagePods: () async {
          // Close the sheet
          Navigator.pop(context);
          
          // Navigate to pods management page
          if (householdId != null && familyMembers.isNotEmpty) {
            await Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => PodsManagementPage(
                  householdId: householdId!,
                  allMembers: familyMembers,
                  currentMemberId: currentMemberId,
                ),
              ),
            );
            
            // Reload pods when returning
            await _loadPods();
          }
        },
      ),
    );
  }

  void _showCreateExperienceSheet(ActivitySuggestion suggestion) async {
    if (householdId == null) return;

    // Track that user accepted this AI suggestion (if it was from AI search)
    if (customPrompt.isNotEmpty) {
      await _trackAISuggestionAccepted(suggestion.activity);
    }

    await showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => CreateExperienceSheet(
        householdId: householdId!,
        allMembers: familyMembers,
        initialParticipantIds: selectedParticipants.toList(),
        activityName: suggestion.activity,
        suggestionId: null, // You can add an ID field to ActivitySuggestion if needed
      ),
    );
    
    // Reload experiences after creating one
    await _loadLiveExperiences();
  }

  Future<void> _saveParticipantSelection() async {
    final prefs = await SharedPreferences.getInstance();
    final key = 'participants_${weather}_${timeOfDay}_${dayOfWeek}';
    await prefs.setStringList(key, selectedParticipants.toList());
  }

  Future<void> _loadParticipantSelection() async {
    final prefs = await SharedPreferences.getInstance();
    final key = 'participants_${weather}_${timeOfDay}_${dayOfWeek}';
    final saved = prefs.getStringList(key);
    
    if (saved != null && saved.isNotEmpty) {
      setState(() {
        selectedParticipants = saved.toSet();
        isAllMode = false; // Saved selection means specific filtering
      });
    } else {
      // Default to "All" mode (variety, no filtering)
      setState(() {
        selectedParticipants = {}; // Empty selection
        isAllMode = true; // Variety mode
      });
    }
  }

  Future<void> _loadPods() async {
    if (householdId == null) return;
    
    try {
      final supabase = Supabase.instance.client;
      final response = await supabase
          .from('pods')
          .select()
          .eq('household_id', householdId!)
          .order('name', ascending: true);
      
      // Load all pods
      var loadedPods = (response as List).map((json) => Pod.fromJson(json)).toList();
      
      // Filter out parent-only pods if current user is a child
      final currentUser = UserContextService.getCurrentMember(currentMemberId, familyMembers);
      if (currentUser?.role == MemberRole.child) {
        loadedPods = loadedPods.where((pod) => !_isPodParentOnly(pod)).toList();
      }
      
      setState(() {
        pods = loadedPods;
      });
    } catch (e) {
      print('Error loading pods: $e');
    }
  }
  
  /// Check if a pod contains only parents (no children or caregivers)
  bool _isPodParentOnly(Pod pod) {
    if (pod.memberIds.isEmpty) return false;
    
    // Get all members in this pod
    final podMembers = familyMembers.where((m) => pod.memberIds.contains(m.id)).toList();
    
    // If all members are parents, it's a parent-only pod
    return podMembers.isNotEmpty && podMembers.every((m) => m.role == MemberRole.parent);
  }

  Future<void> _loadHouseholdId() async {
    final supabase = Supabase.instance.client;
    final userId = supabase.auth.currentUser?.id;

    if (userId == null) return;

    try {
      // Load most recent household from Supabase
      final householdList = await supabase
          .from('households')
          .select()
          .eq('user_id', userId)
          .order('created_at', ascending: false)
          .limit(1);
      
      final householdData = householdList.isNotEmpty ? householdList.first : null;

      if (householdData != null) {
        final bool isFamilyModeEnabled = householdData['family_mode_enabled'] ?? false;
        
        // Load family members from Supabase
        final membersData = await supabase
            .from('family_members')
            .select()
            .eq('household_id', householdData['id'])
            .order('created_at');

        setState(() {
          householdId = householdData['id'];
          householdName = householdData['name'];
          familyModeEnabled = isFamilyModeEnabled;
          
          // Use fromJson to properly parse all fields (including Phase 3 fields)
          familyMembers = (membersData as List<dynamic>)
              .map((m) => FamilyMember.fromJson(m))
              .toList();
        });

        // Determine current member ID
        final memberId = await UserContextService.getCurrentMemberId(
          allMembers: familyMembers,
          familyModeEnabled: familyModeEnabled,
        );
        
        setState(() {
          currentMemberId = memberId;
        });

        // Ensure default "Just Me" pod exists for this household
        await DefaultPodService.ensureDefaultPodExists(householdId!);

        await _loadPods();
        await _loadParticipantSelection();
        await _loadLiveExperiences(); // Load experiences on init

        _fetchNewSuggestion();
      }
    } catch (e) {
      print('Error loading from Supabase: $e');
    }
  }

  @override
  void initState() {
    super.initState();
    // Set default context values
    timeOfDay = _getDefaultTimeOfDay();
    dayOfWeek = _getDefaultDayOfWeek();
    _initializeWeather();
    _loadHouseholdId();
  }

  Future<void> _initializeWeather() async {
    final fetchedWeather = await _getDefaultWeatherContext();
    if (mounted) {
      setState(() {
        weather = fetchedWeather;
      });
    }
  }

  void _onUserSwitched(FamilyMember selectedMember) {
    setState(() {
      currentMemberId = selectedMember.id;
    });
    
    // Optionally re-fetch suggestions for the new user
    _fetchNewSuggestion();
  }

  // Smart suggestion methods
  Future<void> _fetchSmartSuggestion() async {
    print('🌟 _fetchSmartSuggestion called!');
    print('  householdId: $householdId');
    print('  familyMembers.length: ${familyMembers.length}');
    
    if (householdId == null) {
      print('❌ householdId is null!');
      return;
    }
    
    if (familyMembers.isEmpty) {
      print('❌ familyMembers is empty!');
      return;
    }

    try {
      print('✅ Making API call to smart-suggestion...');
      final rulesService = RulesService();
      
      // For testing: simulate a smart suggestion request
      final result = await rulesService.getSmartSuggestion(
        householdId: householdId!,
        locationLabel: 'near School',  // Simulated location
        nearbyMemberIds: familyMembers.take(2).map((m) => m.id!).toList(), // First 2 members
        timeBucket: timeOfDay,
        dayType: _getDayType(),
        dayOfWeek: dayOfWeek,
        confidence: 0.85,
        signalsUsed: ['geofence', 'wifi'],
        reason: '${familyMembers.take(2).length} people detected near School',
        weather: weather,
      );

      print('📥 API Response received:');
      print('  result: $result');

      if (result != null && result['success'] == true) {
        print('✅ Setting smartSuggestionData and showing card');
        setState(() {
          smartSuggestionData = result;
          showSmartSuggestion = true;
        });
      } else {
        print('❌ Result is null or success is false');
      }
    } catch (e) {
      print('❌ Error fetching smart suggestion: $e');
    }
  }

  String _getDayType() {
    final day = DateTime.now().weekday;
    return day >= 6 ? 'weekend' : 'weekday';
  }

  void _dismissSmartSuggestion() async {
    if (smartSuggestionData != null && smartSuggestionData!['log_id'] != null) {
      try {
        final rulesService = RulesService();
        await rulesService.logSmartSuggestionAction(
          logId: smartSuggestionData!['log_id'],
          action: 'dismissed',
        );
      } catch (e) {
        print('Error logging dismiss: $e');
      }
    }

    setState(() {
      showSmartSuggestion = false;
    });
  }

  void _activateSmartSuggestion() async {
    if (smartSuggestionData != null && smartSuggestionData!['log_id'] != null) {
      try {
        final rulesService = RulesService();
        await rulesService.logSmartSuggestionAction(
          logId: smartSuggestionData!['log_id'],
          action: 'activated',
        );
      } catch (e) {
        print('Error logging activate: $e');
      }
    }

    // Create experience from smart suggestion
    if (smartSuggestionData != null && smartSuggestionData!['activity'] != null) {
      final activity = smartSuggestionData!['activity'];
      final suggestion = ActivitySuggestion(
        activity: activity['activity'] ?? 'Activity',
        rationale: activity['rationale'] ?? '',
        tags: List<String>.from(activity['tags'] ?? []),
        durationMinutes: activity['duration_minutes'] ?? 30,
      );
      
      _showCreateExperienceSheet(suggestion);
    }

    setState(() {
      showSmartSuggestion = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: MerryWayTheme.softBg,
      body: SafeArea(
        child: CustomScrollView(
          slivers: [
            // Logo
            SliverToBoxAdapter(
              child: Padding(
                padding: const EdgeInsets.fromLTRB(24, 16, 24, 8),
                child: InkWell(
                  onTap: () {
                    // Refresh suggestions
                    _fetchNewSuggestion();
                  },
                  child: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(
                        'Merryway',
                        style: GoogleFonts.eczar(
                          fontSize: 28,
                          fontWeight: FontWeight.w800,
                          color: MerryWayTheme.textDark,
                          letterSpacing: 0.5,
                        ),
                      ),
                      const SizedBox(width: 6),
                      Icon(
                        Icons.auto_awesome,
                        color: Color(0xFFD4A848),
                        size: 18,
                      ),
                    ],
                  ),
                ),
              ),
            ),
            // Header
            SliverAppBar(
              backgroundColor: Colors.transparent,
              elevation: 0,
              floating: true,
              toolbarHeight: 56,
              actions: [
                // Test Smart Suggestion Button
                IconButton(
                  onPressed: _fetchSmartSuggestion,
                  icon: const Icon(Icons.auto_awesome, color: Color(0xFFFFD700)),
                  tooltip: 'Test Smart Suggestion',
                ),
                const SizedBox(width: 8),
                // Family Health Dashboard Button
                IconButton(
                  onPressed: () {
                    if (householdId != null) {
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => FamilyHealthDashboardPage(
                            householdId: householdId!,
                          ),
                        ),
                      );
                    }
                  },
                  icon: const Icon(Icons.emoji_events, color: MerryWayTheme.accentGolden),
                  tooltip: 'Family Time Health',
                ),
                const SizedBox(width: 8),
                // Moments Button
                IconButton(
                  onPressed: () {
                    if (householdId != null && familyMembers.isNotEmpty) {
                      context.push(
                        '/moments',
                        extra: {
                          'householdId': householdId!,
                          'allMembers': familyMembers,
                        },
                      );
                    }
                  },
                  icon: const Icon(Icons.celebration, color: MerryWayTheme.primarySoftBlue),
                  tooltip: 'Moments',
                ),
                const SizedBox(width: 8),
                // User Switcher (Netflix-style, if family mode enabled)
                if (familyModeEnabled && familyMembers.isNotEmpty)
                  Padding(
                    padding: const EdgeInsets.only(right: 8, top: 8, bottom: 8),
                    child: Align(
                      alignment: Alignment.center,
                      child: UserSwitcher(
                        members: familyMembers,
                        currentUser: UserContextService.getCurrentMember(
                          currentMemberId,
                          familyMembers,
                        ),
                        onUserSelected: _onUserSwitched,
                      ),
                    ),
                  ),
                
                // Settings button
                IconButton(
                  onPressed: () {
                    context.push('/settings');
                  },
                  icon: const Icon(Icons.settings_outlined, color: MerryWayTheme.textDark),
                ),
              ],
            ),
            // Content
            SliverPadding(
              padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 16),
              sliver: SliverToBoxAdapter(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Live/Upcoming Experiences Section
                    if (liveExperiences.isNotEmpty || upcomingExperiences.isNotEmpty) ...[
                      ...liveExperiences.map((exp) => Padding(
                        padding: const EdgeInsets.only(bottom: 16),
                        child: LiveExperienceCard(
                          experience: exp,
                          allMembers: familyMembers,
                          onComplete: () => _handleExperienceComplete(exp),
                          onCancel: () => _handleExperienceCancel(exp),
                        ),
                      )),
                      ...upcomingExperiences.map((exp) {
                        final minutesUntil = exp.startAt!.difference(DateTime.now()).inMinutes;
                        return Padding(
                          padding: const EdgeInsets.only(bottom: 16),
                          child: Container(
                            decoration: BoxDecoration(
                              color: MerryWayTheme.accentGolden.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(12),
                              border: Border.all(
                                color: MerryWayTheme.accentGolden.withOpacity(0.3),
                                width: 1,
                              ),
                            ),
                            padding: const EdgeInsets.all(12),
                            child: Row(
                              children: [
                                Icon(Icons.schedule, color: MerryWayTheme.accentGolden),
                                const SizedBox(width: 12),
                                Expanded(
                                  child: Column(
                                    crossAxisAlignment: CrossAxisAlignment.start,
                                    children: [
                                      Text(
                                        exp.activityName ?? 'Experience',
                                        style: const TextStyle(
                                          fontWeight: FontWeight.w600,
                                          color: MerryWayTheme.textDark,
                                        ),
                                      ),
                                      const SizedBox(height: 2),
                                      Text(
                                        'Starting in $minutesUntil minutes',
                                        style: const TextStyle(
                                          fontSize: 13,
                                          color: MerryWayTheme.textMuted,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                                Icon(Icons.arrow_forward_ios, size: 16, color: MerryWayTheme.textMuted),
                              ],
                            ),
                          ),
                        );
                      }),
                      const SizedBox(height: 16),
                      const Divider(),
                      const SizedBox(height: 16),
                    ],

                    // Pod selector carousel
                    if (pods.isNotEmpty) ...[
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            'Who\'s joining?',
                            style: Theme.of(context).textTheme.titleMedium?.copyWith(
                              fontWeight: FontWeight.w600,
                              color: MerryWayTheme.textDark,
                            ),
                          ),
                          TextButton.icon(
                            onPressed: () async {
                              if (householdId != null && familyMembers.isNotEmpty) {
                                await Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (context) => PodsManagementPage(
                                      householdId: householdId!,
                                      allMembers: familyMembers,
                                      currentMemberId: currentMemberId,
                                    ),
                                  ),
                                );
                                await _loadPods();
                              }
                            },
                            icon: const Icon(Icons.edit_outlined, size: 16),
                            label: const Text('Manage'),
                            style: TextButton.styleFrom(
                              foregroundColor: MerryWayTheme.primarySoftBlue,
                              textStyle: const TextStyle(fontSize: 13),
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 12),
                      SizedBox(
                        height: 90,
                        child: ListView.builder(
                          scrollDirection: Axis.horizontal,
                          itemCount: pods.length + 1, // +1 for "All" option
      itemBuilder: (context, index) {
                            // "All" option at the beginning - shows mixed ideas from all pods
                            if (index == 0) {
                              final isActive = isAllMode;
                              
                              return Padding(
                                padding: const EdgeInsets.only(right: 12),
                                child: GestureDetector(
                                  onTap: () {
                                    setState(() {
                                      selectedPodId = null; // Clear pod selection for "All"
                                    });
                                    // Clear participant selection for variety mode
                                    _onParticipantsChanged({}, setAllMode: true);
                                  },
                                  child: Container(
                                    width: 85,
                                    decoration: BoxDecoration(
                                      color: isActive
                                          ? MerryWayTheme.accentGolden
                                          : MerryWayTheme.softBg,
                                      borderRadius: BorderRadius.circular(16),
                                      border: Border.all(
                                        color: isActive
                                            ? MerryWayTheme.accentGolden
                                            : MerryWayTheme.textMuted.withOpacity(0.2),
                                        width: 2,
                                      ),
                                      boxShadow: isActive
                                          ? [
                                              BoxShadow(
                                                color: MerryWayTheme.accentGolden.withOpacity(0.3),
                                                blurRadius: 8,
                                                offset: const Offset(0, 2),
                                              ),
                                            ]
                                          : null,
                                    ),
                                    child: Column(
                                      mainAxisAlignment: MainAxisAlignment.center,
                                      children: [
                                        Text(
                                          '✨',
                                          style: TextStyle(
                                            fontSize: 32,
                                            color: isActive ? Colors.white : MerryWayTheme.textDark,
                                          ),
                                        ),
                                        const SizedBox(height: 6),
                                        Padding(
                                          padding: const EdgeInsets.symmetric(horizontal: 4),
                                          child: Text(
                                            'All',
                                            textAlign: TextAlign.center,
                                            style: Theme.of(context).textTheme.bodySmall?.copyWith(
                                              fontWeight: FontWeight.w600,
                                              color: isActive ? Colors.white : MerryWayTheme.textDark,
                                              fontSize: 11,
                                            ),
                                            maxLines: 2,
                                            overflow: TextOverflow.ellipsis,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                              );
                            }
                            
                            // Regular pods (index - 1 because of "All" at index 0)
                            final pod = pods[index - 1];
                            final isActive = !isAllMode && 
                                selectedPodId == pod.id &&
                                selectedParticipants.toSet().toString() == pod.memberIds.toSet().toString();
                            
                            return Padding(
                              padding: const EdgeInsets.only(right: 12),
                              child: GestureDetector(
                                onTap: () {
                                  setState(() {
                                    selectedPodId = pod.id; // Set pod selection
                                  });
                                  _onParticipantsChanged(pod.memberIds.toSet(), setAllMode: false);
                                },
                                child: Container(
                                  width: 85,
                                  decoration: BoxDecoration(
                                    color: isActive
                                        ? Color(int.parse(pod.color.substring(1), radix: 16) + 0xFF000000)
                                        : MerryWayTheme.softBg,
                                    borderRadius: BorderRadius.circular(16),
                                    border: Border.all(
                                      color: isActive
                                          ? Color(int.parse(pod.color.substring(1), radix: 16) + 0xFF000000)
                                          : MerryWayTheme.textMuted.withOpacity(0.2),
                                      width: 2,
                                    ),
                                    boxShadow: isActive
                                        ? [
                                            BoxShadow(
                                              color: Color(int.parse(pod.color.substring(1), radix: 16) + 0xFF000000).withOpacity(0.3),
                                              blurRadius: 8,
                                              offset: const Offset(0, 2),
                                            ),
                                          ]
                                        : null,
                                  ),
                                  child: Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Text(
                                        pod.icon,
                                        style: TextStyle(
                                          fontSize: 32,
                                          color: isActive ? Colors.white : MerryWayTheme.textDark,
                                        ),
                                      ),
                                      const SizedBox(height: 6),
                                      Padding(
                                        padding: const EdgeInsets.symmetric(horizontal: 4),
                                        child: Text(
                                          pod.name,
                                          textAlign: TextAlign.center,
                                          style: Theme.of(context).textTheme.bodySmall?.copyWith(
                                            fontWeight: FontWeight.w600,
                                            color: isActive ? Colors.white : MerryWayTheme.textDark,
                                            fontSize: 11,
                                          ),
                                          maxLines: 2,
                                          overflow: TextOverflow.ellipsis,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            );
                          },
                        ),
                      ),
                      const SizedBox(height: 16),
                    ],

                    // Context input panel (always visible, settings show on focus)
                    ContextInputPanel(
                      initialWeather: weather,
                      initialTimeOfDay: timeOfDay,
                      initialDayOfWeek: dayOfWeek,
                      initialPrompt: customPrompt,
                      onApply: (w, t, d, p) {
                        _fetchNewSuggestion(
                          customWeather: w,
                          customTimeOfDay: t,
                          customDayOfWeek: d,
                          customPromptText: p,
                        );
                      },
                    ),
                    const SizedBox(height: 24),

                    // Suggestions section
                    BlocBuilder<FamilyBloc, FamilyState>(
                      builder: (context, state) {
                        if (state is FamilyLoading) {
                      return SizedBox(
                        height: MediaQuery.of(context).size.height * 0.5,
                        child: const Center(
                          child: CircularProgressIndicator(
                            color: MerryWayTheme.primarySoftBlue,
                          ),
            ),
          );
        }

                    if (state is SuggestionsLoaded) {
                      return Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // Welcome message
                          Row(
                            children: [
                              Text(
                                _getGreeting(),
                                style: Theme.of(context).textTheme.headlineMedium?.copyWith(
                                      color: MerryWayTheme.textMuted,
                                    ),
                              ),
                              const SizedBox(width: 8),
                              const Text('✨', style: TextStyle(fontSize: 20)),
                            ],
                          ),
                          if (householdName != null) ...[
                            const SizedBox(height: 4),
                            Text(
                              householdName!,
                              style: Theme.of(context).textTheme.bodyLarge?.copyWith(
                                    color: MerryWayTheme.textMuted,
                                  ),
                            ),
                          ],
                          const SizedBox(height: 24),

                          // Smart Suggestion Card (if available)
                          if (showSmartSuggestion && smartSuggestionData != null) ...[
                            SmartSuggestionCard(
                              activityTitle: smartSuggestionData!['activity']?['activity'] ?? 'Activity',
                              rationale: smartSuggestionData!['activity']?['rationale'] ?? '',
                              locationLabel: smartSuggestionData!['location_label'] ?? 'nearby',
                              nearbyMembers: familyMembers
                                  .where((m) => (smartSuggestionData!['member_ids'] as List? ?? [])
                                      .contains(m.id))
                                  .toList(),
                              reason: smartSuggestionData!['reason'] ?? 'Smart suggestion',
                              onDismiss: _dismissSmartSuggestion,
                              onActivate: _activateSmartSuggestion,
                              showDebugInfo: false, // Toggle this for debugging
                              signals: (smartSuggestionData!['activity']?['tags'] as List? ?? [])
                                  .map((e) => e.toString())
                                  .toList(),
                              confidence: 0.85,
                            ),
                            const SizedBox(height: 16),
                          ],

                          // AI Loading Banner
                          if (isLoadingAISuggestions) ...[
                            Container(
                              margin: const EdgeInsets.only(bottom: 16),
                              padding: const EdgeInsets.all(24),
                              decoration: BoxDecoration(
                                gradient: LinearGradient(
                                  colors: [
                                    MerryWayTheme.primarySoftBlue.withOpacity(0.1),
                                    MerryWayTheme.accentLavender.withOpacity(0.1),
                                  ],
                                  begin: Alignment.topLeft,
                                  end: Alignment.bottomRight,
                                ),
                                borderRadius: BorderRadius.circular(16),
                                border: Border.all(
                                  color: MerryWayTheme.primarySoftBlue.withOpacity(0.3),
                                  width: 1,
                                ),
                              ),
                              child: Row(
                                children: [
                                  SizedBox(
                                    width: 20,
                                    height: 20,
                                    child: CircularProgressIndicator(
                                      strokeWidth: 2,
                                      valueColor: AlwaysStoppedAnimation<Color>(
                                        MerryWayTheme.primarySoftBlue,
                                      ),
                                    ),
                                  ),
                                  const SizedBox(width: 16),
                                  Expanded(
                                    child: Column(
                                      crossAxisAlignment: CrossAxisAlignment.start,
                                      children: [
                                        Text(
                                          'Creating personalized suggestions...',
                                          style: GoogleFonts.spaceGrotesk(
                                            fontSize: 16,
                                            fontWeight: FontWeight.w600,
                                            color: MerryWayTheme.textDark,
                                          ),
                                        ),
                                        const SizedBox(height: 4),
                                        Text(
                                          'Our AI is crafting the perfect activities for your family ✨',
                                          style: GoogleFonts.spaceGrotesk(
                                            fontSize: 14,
                                            color: MerryWayTheme.textMuted,
                                          ),
                                        ),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],

                          // Suggestions cards
                          ...state.suggestions.suggestions.asMap().entries.map((entry) {
                            int index = entry.key;
                            ActivitySuggestion suggestion = entry.value;

                            return Padding(
                              padding: const EdgeInsets.only(bottom: 16),
                              child: SuggestionCard(
                                index: index,
                                suggestion: suggestion,
                                householdId: householdId,
                                allMembers: familyMembers.isNotEmpty ? familyMembers : null,
                                currentMemberId: currentMemberId,
                                selectedMemberIds: selectedParticipants,
                                onParticipantsChanged: _onParticipantsChanged,
                                onManagePresets: _showPresetSheet,
                                onMakeExperience: () => _showCreateExperienceSheet(suggestion),
                              ),
                            );
                          }),

                          const SizedBox(height: 24),

                          // Refresh button
                          SizedBox(
                            width: double.infinity,
                            child: ElevatedButton.icon(
                              onPressed: _fetchNewSuggestion,
                              icon: const Icon(Icons.refresh),
                              label: const Text('Try Another Idea'),
                              style: ElevatedButton.styleFrom(
                                padding: const EdgeInsets.symmetric(vertical: 16),
                              ),
                            ),
                          ),
                        ],
                      );
                    }

                    if (state is FamilyError) {
                      return SizedBox(
                        height: MediaQuery.of(context).size.height * 0.5,
                        child: Center(
                          child: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              const Icon(
                                Icons.error_outline,
                                size: 64,
                                color: MerryWayTheme.primaryWarmPink,
                              ),
                              const SizedBox(height: 16),
                              Text(
                                'Oh botheration!',
                                style: Theme.of(context).textTheme.headlineMedium,
                              ),
                              const SizedBox(height: 8),
                              Padding(
                                padding: const EdgeInsets.symmetric(horizontal: 32),
                                child: Text(
                                  'We couldn\'t fetch your magical suggestions right now. Please try again! 💫',
                                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                                        color: MerryWayTheme.textMuted,
                                      ),
                                  textAlign: TextAlign.center,
                                ),
                              ),
                              const SizedBox(height: 24),
                              ElevatedButton.icon(
                                onPressed: _fetchNewSuggestion,
                                icon: const Icon(Icons.refresh),
                                label: const Text('Try Again'),
                              ),
                            ],
                          ),
                        ),
                      );
                    }

                    // Initial/empty state
                    return SizedBox(
                      height: MediaQuery.of(context).size.height * 0.5,
                      child: Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.auto_awesome,
                              size: 80,
                              color: MerryWayTheme.accentGolden.withOpacity(0.3),
                            ),
                            const SizedBox(height: 16),
                            Text(
                              'Let\'s find something magical!',
                              style: Theme.of(context).textTheme.headlineMedium,
                            ),
                            const SizedBox(height: 8),
                            Text(
                              'Tap the button below to get started',
                              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                                    color: MerryWayTheme.textMuted,
                                  ),
                            ),
                            const SizedBox(height: 24),
                            ElevatedButton.icon(
                              onPressed: () => _fetchNewSuggestion(),
                              icon: const Icon(Icons.auto_awesome),
                              label: const Text('Get Ideas'),
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
