import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:app/modules/core/di/service_locator.dart';
import 'package:app/modules/core/services/api/i_api_service.dart';
import 'package:app/modules/tags/blocs/tags_event.dart';
import 'package:app/modules/tags/blocs/tags_state.dart';
import 'package:app/modules/tags/models/tag.dart';

class TagsBloc extends Bloc<TagsEvent, TagsState> {
  static bool hasInitialized = false;
  final IApiService _apiService = sl<IApiService>();

  TagsBloc() : super(TagsInitial()) {
    on<LoadUserTags>(_onLoadUserTags);
    on<CreateTag>(_onCreateTag);
    on<CreateTagging>(_onCreateTagging);
    on<RemoveTagging>(_onRemoveTagging);
    on<LoadTaggingsForItem>(_onLoadTaggingsForItem);
    on<LoadItemsForTags>(_onLoadItemsForTags);
  }

  Future<void> _onLoadUserTags(LoadUserTags event, Emitter<TagsState> emit) async {
    emit(TagsLoading());
    try {
      final tags = await _apiService.request<List<Tag>>(
        endpoint: 'tags',
        fromJson: (json) => (json['tags'] as List)
            .map((t) => Tag.fromJson(t))
            .toList(),
      );
      emit(UserTagsLoaded(tags));
    } catch (e) {
      emit(TagsError(e.toString()));
    }
  }

  Future<void> _onCreateTag(CreateTag event, Emitter<TagsState> emit) async {
    try {
      final tag = await _apiService.request<Tag>(
        endpoint: 'tags/create',
        method: 'POST',
        body: {
          'label': event.label,
          'props': { 'auto_generated': event.autoGenerated },
        },
        fromJson: (json) => Tag.fromJson(json['tag']),
      );
      
      // If we have loaded tags, add the new one to the list
      if (state is UserTagsLoaded) {
        final currentTags = (state as UserTagsLoaded).tags;
        emit(UserTagsLoaded([...currentTags, tag]));
      }
    } catch (e) {
      emit(TagsError(e.toString()));
    }
  }

  Future<void> _onCreateTagging(CreateTagging event, Emitter<TagsState> emit) async {
    try {
      await _apiService.request(
        endpoint: 'tags/tagging/create',
        method: 'POST',
        body: {
          'tag_id': event.tagId,
          'taggable_type': event.taggableType.toString().split('.').last,
          'taggable_id': event.taggableId,
        },
        fromJson: (json) => json,  // Simple response, no parsing needed
      );
      
      // Refresh tags for the item if we're showing them
      if (state is ItemTagsLoaded && 
          (state as ItemTagsLoaded).taggableId == event.taggableId) {
        add(LoadTaggingsForItem(
          taggableType: event.taggableType,
          taggableId: event.taggableId,
        ));
      }
    } catch (e) {
      emit(TagsError(e.toString()));
    }
  }

  Future<void> _onRemoveTagging(RemoveTagging event, Emitter<TagsState> emit) async {
    try {
      await _apiService.request(
        endpoint: 'tags/tagging/remove',
        method: 'POST',
        body: {
          'tag_id': event.tagId,
          'taggable_id': event.taggableId,
        },
        fromJson: (json) => json,  // Simple response, no parsing needed
      );
      
      // Refresh tags for the item if we're showing them
      if (state is ItemTagsLoaded && 
          (state as ItemTagsLoaded).taggableId == event.taggableId) {
        add(LoadTaggingsForItem(
          taggableType: event.taggableType,
          taggableId: event.taggableId,
        ));
      }
    } catch (e) {
      emit(TagsError(e.toString()));
    }
  }

  Future<void> _onLoadTaggingsForItem(LoadTaggingsForItem event, Emitter<TagsState> emit) async {
    emit(TagsLoading());
    try {
      final tags = await _apiService.request<List<Tag>>(
        endpoint: 'tags/taggings/${event.taggableType.toString().split('.').last}/${event.taggableId}',
        method: 'GET',
        fromJson: (json) => (json['tags'] as List)
            .map((t) => Tag.fromJson(t))
            .toList(),
      );
      emit(ItemTagsLoaded(tags, event.taggableId));
    } catch (e) {
      emit(TagsError(e.toString()));
    }
  }

  Future<void> _onLoadItemsForTags(LoadItemsForTags event, Emitter<TagsState> emit) async {
    emit(TagsLoading());
    try {
      final response = await _apiService.request<Map<String, dynamic>>(
        endpoint: 'tags/items',
        method: 'POST',
        body: {
          'tag_ids': event.tagIds.join(','),
          'taggable_type': event.taggableType.toString().split('.').last,
        },
        fromJson: (json) => json,
      );
      
      final itemIds = (response['item_ids'] as List).cast<String>();
      emit(TaggedItemsLoaded(itemIds, event.tagIds));
    } catch (e) {
      emit(TagsError(e.toString()));
    }
  }
} 