import 'package:equatable/equatable.dart';
import 'package:app/modules/tags/models/taggable_type.dart';
import 'package:app/modules/tags/models/tag.dart';

abstract class TagsEvent extends Equatable {
  @override
  List<Object?> get props => [];
}

// Load all tags for the current user
class LoadUserTags extends TagsEvent {}

// Create a new tag
class CreateTag extends TagsEvent {
  final String label;
  final bool autoGenerated;

  CreateTag({
    required this.label,
    this.autoGenerated = false,
  });

  @override
  List<Object?> get props => [label, autoGenerated];
}

// Apply a tag to an item
class CreateTagging extends TagsEvent {
  final String tagId;
  final TaggableType taggableType;
  final String taggableId;

  CreateTagging({
    required this.tagId,
    required this.taggableType,
    required this.taggableId,
  });

  @override
  List<Object?> get props => [tagId, taggableType, taggableId];
}

// Remove a tag from an item
class RemoveTagging extends TagsEvent {
  final String tagId;
  final TaggableType taggableType;
  final String taggableId;

  RemoveTagging({
    required this.tagId,
    required this.taggableType,
    required this.taggableId,
  });

  @override
  List<Object?> get props => [tagId, taggableType, taggableId];
}

// Load tags for a specific item
class LoadTaggingsForItem extends TagsEvent {
  final TaggableType taggableType;
  final String taggableId;

  LoadTaggingsForItem({
    required this.taggableType,
    required this.taggableId,
  });

  @override
  List<Object?> get props => [taggableType, taggableId];
}

// Get items that have specific tags
class LoadItemsForTags extends TagsEvent {
  final List<String> tagIds;
  final TaggableType taggableType;

  LoadItemsForTags({
    required this.tagIds,
    required this.taggableType,
  });

  @override
  List<Object?> get props => [tagIds, taggableType];
} 